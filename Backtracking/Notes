Backtracking is an algorithmic technique used for finding solutions to a problem recursively by incrementally building the solution by considering all potential combinations and abandoning the ones that do not satisfy the problem constraints.

Backtracking algorithms are based on the DFS (Depth First Search) approach. 

Subsets :->

Approach 1:

The idea here is to recursively call the same function to consider all subsets. For each index, consider two cases: one including the current element and one excluding the current element.

Pseudocode:

If reached end of array, add current subset to list of subsets
Include current element in subset
Add current element
Get all subsets after current index
Exclude current element in subset
Remove current element
Get all subsets after current index

Code :->
class Solution {
	
	static void subsetsUtil(int[] A, int start, List<Integer> current, List<List<Integer>> answer){
		if(start == A.length){
			answer.add(new ArrayList<Integer>(current));
			return;
		}
		current.add(A[start]);
		subsetsUtil(A, start + 1, current, answer);
		current.remove(current.size()-1);
		subsetsUtil(A, start+1, current, answer);
	}
	
	List<List<Integer>> subsets(int[] A) {
	    List<Integer> current = new ArrayList<>();
		List<List<Integer>> answer = new ArrayList<>();
		subsetsUtil(A, 0, current, answer);
		return answer;
	}
}


// For loop one
Approach 2:

The idea here is to recursively call the same function to consider all subsets.

For each index:

Add current subset
Iterate over all the elements from that index till the end. In each iteration:
Include an element in the subset
Recursively call with the next index
Exclude last inserted element

nums[] = 1 2 3
                       []
				1               2        3
		 1 2       1 3            2 3
	1 3                            
    
Subset :-> [], 1, 2, 3, 1 2, 1 3, 2 3, 1 3



Code :->

class Solution {
	
	static void subsetsUtil(int[] A, int currentIndex, List<Integer> current, List<List<Integer>> answer){
		
	answer.add(new ArrayList<Integer>(current));
		
		for(int i = currentIndex; i<A.length; i++){
		current.add(A[i]);
		subsetsUtil(A, i + 1, current, answer);
		current.remove(current.size()-1);
		}
	}
	
	List<List<Integer>> subsets(int[] A) {
	    List<Integer> current = new ArrayList<>();
		List<List<Integer>> answer = new ArrayList<>();
		subsetsUtil(A, 0, current, answer);
		return answer;
	}
}
