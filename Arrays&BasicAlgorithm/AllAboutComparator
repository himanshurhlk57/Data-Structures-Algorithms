import java.util.*;
import java.lang.*;
import java.io.*;


// Arrays.sort(arr);
// int[] arr = {5,7,1,3,2,9};
// Arrays.sort(arr,1,4); -> //5 1 3 7 2 9

// ** Sort with Comparator **

// Sorts the specified array according to the order induced by the specified comparator.

// example - {1,3,2,5,7,8} I want to sort these order in reverse order
// After sorting - {8,7,5,3,2,1} 
// Say to the sorting method that you need to compare two elements based on my custom logic(custom comparision logic).
// I can also sort this array in different fashion like ->
// 1- {1,3,5,7,2,8} - odd parts comes first in sorted fashion then even parts in sorted fashion.
// 2- {2,8,1,3,5,7} - Even parts come first but in descending order then odd parts in ascending order. (All through the comparator)

// lets create our own comparator
// Comparator<Employee> comparator is basically an interface and employee is its data type;
// Comparator interface contains a method compare(Employee emp1, Employee em2) we just need to implement it; 
// The compare method need to return -1, 0, 1
// -1 -> Negative number denotes that the first element should be treated smaller than the second element;
// 0 -> Zero denotes that both of these elements should be treated as equal;
// 1 -> Positive number indicates that the first element should be treated greater than the second element;

// Integer array -> {3,1,2,5,8,6,7};
// I want to sort it in the descending order so will create a class IntegerReversecomparator that will implement Comparator<Integer>

class IntegerReversecomparator implements Comparator<Integer>{
	public int compare(Integer num1, Integer num2){
		
//This is the default condition it will sort it in the ascending order as return -1 indicates that num1 is smaller than num2
// And so return 1 indicates that num1 is greater than num2;
// Output - 1 2 3 5 6 7 8
// 1 ->
		// if(num1<num2){ // I want to consider num1 smaller than num2 in sorted order as well
		// 	return -1;
		// }
		// if(num1>num2){ // I want to consider num1 is greater than num2 in sorted order as well if it is actually greater than this.
		// 	return 1;
		// }
		// return 0;
		
		// 2-> 
		//This will sort in descending order
		// Output -> 8 7 6 5 3 2 1 
		// if(num1<num2){
		// 	return 1;
		// }
		// if(num1>num2){
		// 	return -1;
		// }
		// return 0;
		
		// 3 -> // there's a compareTo method in Integer which return some negative, positive and zero based on their natural ordering.
     // Sort in ascending order.
	// return num1.compareTo(num2); 
	
	
	// Sorts in descending order.
	// return num2.compareTo(num1); 
		// or 
	return -(num1.compareTo(num2)); 

		
	}
}

// Sort string based on which string have length smaller should comes first which ever string have larger length should come later and if the length is same sort based on natural ordering a -> b -> c
// 
// class String<Comparator> implements Comparator<String>{
// 	public int comparator(String str1, String str2){
// 		int ans = str1.length().compareTo(str.length());
// 	}
// }




class WorkAtTech{
	public static void main (String[] args) throws java.lang.Exception{
		Integer[] arr = {3,1,2,5,8,6,7};
		Arrays.sort(arr, new IntegerReversecomparator());
		for(int i = 0; i<arr.length; i++){
			System.out.print(arr[i] + " ");
		}
		System.out.println();
	}
}