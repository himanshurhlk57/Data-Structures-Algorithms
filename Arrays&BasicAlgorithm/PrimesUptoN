class Solution {
	
// A Prime number is a number that has exactly two divisors → 1 and itself.
// Note: 1 is not a prime number.
// Given a number, find all the prime numbers from 1 to that number.
// Example
// primesUptoN(20) → 2, 3, 5, 7, 11, 13, 17, 19
	boolean isPrime(int number){
		for(int div = 2; div*div<=number; div++){
			if(number%div==0){
				return false;
			}
		}
		return true;
	}
	List<Integer> primesUptoN(int n) {
		List<Integer> result = new ArrayList<>();
		for(int i = 2; i<=n; i++){
			if(isPrime(i)==true){
				result.add(i);
			}
		}
		return result;
	}
}




// 	Optimal Approach
// We can precompute all the primes from 1 to N in N * log(logN) time complexity 
using the Sieve of Eratosthenes.

// In this algorithm, we initially consider all the numbers from 1 to N to be primes,
 then we iterate over all the numbers from 2 to sqrt(N), and if we find a prime number,
  then we mark all its multiples as non-prime.

// At the end of the algorithm, only the prime numbers remain unmarked and so we can decide if a number is prime in constant time.

// Analysis
// Time Complexity: O(N * log(logN) + N)
// Space Complexity: O(n)


// Sieve of Eratosthenes.

List<Integer> primesUptoN(int n) {

	boolean[] primes = new boolean[n];
	for(int i = 0; i<primes.length; i++){
		primes[i] = true;
	}
	for(int i = 2; i*i<primes.length; i++){
		if(primes[i]==true){
			for(int j = i; j*i<primes.length; j++){
				primes[i*j]=false;
			}
		}
	}
	List<Integer> result = new ArrayList<>();
	for(int i = 2; i<=n; i++){
		if(primes[i]==true){
			result.add(i);
		}
	}
	return result;

}

// Given an integer n, return the number of prime numbers that are strictly less than n.
// Input: n = 10
// Output: 4
// Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.

class Solution {
	public int countPrimes(int n) {
		 
		 boolean[] primes = new boolean[n];
		 for(int i = 0; i<primes.length; i++){
			 primes[i] = true;
		 }
		 
		 for(int i = 2; i*i<primes.length; i++){
			 if(primes[i]==true){
				 for(int j = i; j*i<primes.length; j++){
					 primes[i*j] = false;
				 }
			 }
		 }
		 int countPrimes = 0;
		 for(int i = 2; i<primes.length; i++){
			 if(primes[i]){
				 countPrimes++;
			 }
		 }
		 return countPrimes;